@page "/upsdisplay/{UpsName}/{UpsID}"

@using System.Net.Http
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Threading.Tasks
@inject HttpClient HttpClient
@inject NavigationManager Nav
@inject ApiService ApiService
@using Newtonsoft.Json.Linq
@inject NavigationManager Nav
@using Newtonsoft.Json

<MudBreadcrumbs Items="_items" Separator=">"></MudBreadcrumbs>  <!-- Home->UPSs->UpsName -->

@* Refresh battery display *@
<MudText Typo="Typo.h3" GutterBottom="true">@UpsName
    <MudIconButton Icon="@Icons.Material.Filled.Refresh" aria-label="refresh" OnClick="GetBateries"></MudIconButton>
</MudText>

<MudCheckBox @bind-Checked="@DisplayStatus">Battery Status</MudCheckBox>


@if (data != null)
{
    <MudContainer>
        <MudGrid class = "display-grid"> 
            @foreach (var bat in data)
            {   
                // Battery card
                <MudItem Class="display-card" @onclick="() => ToggleCollapse(bat)">
                    <MudCardContent>

                        <div style= "position: relative;">
                            @* Circle with color indicating state of health (SoH) *@
                            <MudAvatar class = "@($"{GetPriorityColorClass(bat.SoH)} display-avatar")" Size="Size.Small">
                                @if (DisplayStatus)
                                {
                                    // Battery status displayed in icon inside SoH circle
                                    <MudTooltip Text="@bat.Status" Placement="Placement.Top">
                                        <MudIcon Icon="@GetStatusIcon(bat.Status)" Size="Size.Small" />
                                    </MudTooltip>
                                }
                            </MudAvatar>

                            <div style="margin-right: 40px;">   <!-- margin: space between text and circle -->
                                <MudText Typo="Typo.h6"> @bat.Name </MudText>

                                <div class="collapsible-content" style="display: @(bat.Collapsed ? "none" : "block");">
                                @if(bat.Items != null && bat.Items.Length != 0){
                                    @foreach (var item in bat.Items)
                                    {  
                                        // Item card 
                                        <MudCard Class="@($"{GetPriorityColorClass(item.Priority)} smaller-card")">
                                            <MudCardContent>
                                                <MudText> @item.Name: @item.LastValue</MudText>
                                            </MudCardContent>
                                        </MudCard>
                                    }
                                }
                                </div>
                            </div>
                        </div>
                    </MudCardContent>
                </MudItem>
            }
        </MudGrid>
    </MudContainer>
}


@code {
    private bool refresh = true;

    private List<BreadcrumbItem> _items;

    public bool DisplayStatus { get; set; } = false;

    private Battery[]? data = default!;

    private string apiResponse = "";

    [Parameter]
    public string UpsName { get; set; }

    [Parameter]
    public string UpsID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _items = new List<BreadcrumbItem>{   
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("UPSs", href: "/upsdisplay"),
            new BreadcrumbItem(UpsName, href: null, disabled: true)
            };

            await GetBateries();

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }

    }

    // Sends battery request, filters out obsolete items, sets item triggers, state of health and status for each battery
    private async Task GetBateries(){
        /*var json = await File.ReadAllTextAsync("wwwroot/sample-data/hostItemResponse.json");
        data = Newtonsoft.Json.JsonConvert.DeserializeObject<Battery[]>(json);*/

        try
        {
            /**** Send host item GET request to Zabbix API ****
             * Send: UPS id
             * Get: Battery list
             **************************************************/
            apiResponse = await ApiService.GetApiResponse("hostItem", new string[] {UpsID}).ConfigureAwait(false);

            JObject json = JObject.Parse(apiResponse);

            // Deserialize 
            data = json["result"].ToObject<Battery[]>();     // JSON to array of Battery objects

            List<string> hostIDs =  new List<string>();     // IDs of all of the batteries for trigger request

            foreach (var bat in data)
            {
                bat.Items = bat.Items.Where(item => !item.Name.StartsWith("ICMP")) // Remove obsolete items from each battery
                .Select(item =>
                {
                    if (item.Name.StartsWith("Daily"))
                    {
                        // Round off the float value
                        item.LastValue = Math.Round(float.Parse(item.LastValue), 2).ToString();
                    }
                    return item;
                }).ToArray();

                hostIDs.Add(bat.HostID);
            }

            await GetTriggers(hostIDs.ToArray()); 

            await InvokeAsync(StateHasChanged);     // Allow for components to re-render

            SetSoH();   // Linear calculation of state of health
            SetBatteryStatus();  // Under Maintenance, Charging, Discharging or Unknown

            Array.Sort(data, (a, b) => b.SoH.CompareTo(a.SoH)); // Order from sickest to healthiest
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    // Sends trigger request for batteries, sets triggers and sets priority for each battery item
    private async Task GetTriggers(string[] hostIDs){

        /**** Send item trigger GET request to Zabbix API ****
         * Send: Battery ids
         * Get: Item list
         *****************************************************/
        apiResponse = await ApiService.GetApiResponse("itemTrigger", hostIDs).ConfigureAwait(false);
        
        JObject json = JObject.Parse(apiResponse);

        // Deserialize 
        var dataItems = json["result"].ToObject<Item[]>();      // JSON to array of Item objects

        foreach(var bat in data){
            // Group triggers by Item and hostId, filter by IsProblem = "1"(active), and select highest priority
            foreach(var item in bat.Items)
            {   
                // Set current Item (saved data) triggers
                item.Triggers = dataItems.Where(dataItem => dataItem.HostID == item.HostID && dataItem.Name == item.Name)   // Response Item is current Item
                .Select(dataItem => dataItem.Triggers)  // Get response Item's triggers
                .SingleOrDefault();

                if (item.Triggers != null)
                {
                    var highestTrigger = item.Triggers
                        .Where(trigger => trigger.Value == "1")     // Trigger is from an active problem
                        .OrderByDescending(trigger => int.Parse(trigger.Priority))  // Convert to int for sorting, Order from highest priority to lowest
                        .FirstOrDefault(); // Get highest value

                    if (highestTrigger != null){
                        item.Priority = int.Parse(highestTrigger.Priority);     // Set item priority to highest current priority (of an active problem)
                    }
                }
                
            }         
        }
    }
    

    /***** Calculates and sets state of health of each battery using its item's priorities ******
     !  All items weight the same in this method
     *******************************************************************************************/
    private void SetSoH()
    {
        foreach (Battery bat in data)
        {
            int SoH = 0;
            foreach (Item item in bat.Items)
            {
                SoH += item.Priority;
            }
            bat.SoH = SoH/bat.Items.Length;
        }
    }

    // Gets card style according to item severity/priority
    private string GetPriorityColorClass(int priority)
    {
        switch (priority)
        {
            case 0: return "excellent-card";
            case 1: return "excellent-card";
            case 2: return "low-warning-card";
            case 3: return "warning-card";
            case 4: return "low-urgency-card";
            case 5: return "urgency-card";
            default: return "unknown-card";
        }
    }


    // Sets battery status using voltage values
    private void SetBatteryStatus()
    {
        float voltage;
        foreach (Battery bat in data)
        {
            voltage = float.Parse(bat.Items.FirstOrDefault(item => item.Name == "Voltage").LastValue) / 1000f;
            if(13.5 <= voltage && voltage <= 13.62) bat.Status = "Charging";
            //Handle values in between
            else if(12.5 <= voltage && voltage <= 12.9) bat.Status = "Under Maintenance";
            else if(10.5 <= voltage && voltage < 12.5) bat.Status = "Discharging";
            else bat.Status = "Unknown";
        }
    }

    private string GetStatusIcon(string status){
        switch (status)
        {
            case "Under Maintenance": return Icons.Material.Filled.Settings;
            case "Charging": return Icons.Material.Filled.BatteryChargingFull;
            case "Discharging": return Icons.Material.Filled.BatteryAlert;
            default: return Icons.Material.Filled.BatteryUnknown;
        }
    }

    // Collapses/Expands battery card
    private void ToggleCollapse(Battery bat)
    {
        bat.Collapsed = !bat.Collapsed;
    }

    public class Battery
    {
        public string? HostID { get; set; }
        public string? Name { get; set; }
        public Item[]? Items { get; set; }
        public bool Collapsed { get; set; } = true;
        public int SoH {get; set;} = 0;
        public string Status { get; set; }
    }

    public class Item
    {   
        public string HostID { get; set; }
        public string Name { get; set; }
        public string LastValue { get; set; }
        public int Priority {get; set;} = 0;
        public Trigger[]? Triggers { get; set; }
    }

    public class Trigger
    {
        public string ItemID { get; set; }
        public string Description { get; set;}
        public string Priority { get; set;}
        public string Value { get; set;}        // 1 if its an active problem, 0 if not
    }

}