@inherits LayoutComponentBase
@inject AuthService AuthService
@inject NavigationManager Nav
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorageService


<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.ColorLens" Color="Color.Default" OnClick="ChangeThemeAsync"/>
        @if(rendered && AuthService.IsUserLoggedIn())
        {
            <MudButton OnClick="Logout" Color="Color.Primary" Variant="Variant.Filled">Logout</MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">UPS_Monitor</MudText>
        </MudDrawerHeader>
        @if(rendered && AuthService.IsUserLoggedIn())
        {
        <NavMenu />
        }
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider Theme = "@_currentTheme"/>


@code {
    
    private string _themeName = "light";

    bool _drawerOpen = true;

    private bool rendered = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        AuthService.AuthenticationStateChanged += async () => await InvokeAsync(StateHasChanged);

        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.Init();
            rendered = true;

            if (await LocalStorageService.ContainKeyAsync("theme"))
                _themeName = await LocalStorageService.GetItemAsStringAsync("theme");
            else
                _themeName = "light";

            _currentTheme = _themeName == "light" ? _lightTheme : _darkTheme;

            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        await InvokeAsync(StateHasChanged);
        await Task.Delay(100);
        Nav.NavigateTo("");
    }

    MudTheme _currentTheme = null;

    MudTheme _darkTheme = new MudTheme
    {
        Palette = new Palette
        {
            AppbarBackground = "#0097FF",
            AppbarText = "#FFFFFF",
            Primary = "#007CD1",
            TextPrimary = "#FFFFFF",
            Background = "#001524",
            TextSecondary = "#E2EEF6",
            DrawerBackground = "#093958",
            DrawerText = "#FFFFFF",
            Surface = "#093958",
            ActionDefault = "#0C1217",
            ActionDisabled = "#2F678C",
            TextDisabled = "#B0B0B0",
        }
    };

    MudTheme _lightTheme = new MudTheme
    {
        Palette = new Palette
        {
            AppbarBackground = "#0097FF",
            AppbarText = "#FFFFFF",
            Primary = "#007CD1",
            TextPrimary = "#0C1217",
            Background = "#F4FDFF",
            TextSecondary = "#0C1217",
            DrawerBackground = "#C5E5FF",
            DrawerText = "#0C1217",
            Surface = "#E4FAFF",
            ActionDefault = "#0C1217",
            ActionDisabled = "#2F678C",
            TextDisabled = "#676767",
        }
    };

    private async Task ChangeThemeAsync()
    {
        if (_themeName == "light")
        {
            _currentTheme = _darkTheme;
            _themeName = "dark"; 
        }
        else
        {
            _currentTheme = _lightTheme;
            _themeName = "light";
        }
        
        await LocalStorageService.SetItemAsStringAsync("theme", _themeName).ConfigureAwait(false);
    }
}
