@inherits LayoutComponentBase
@inject AuthService AuthService
@inject NavigationManager Nav
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorageService


<MudThemeProvider Theme = "@_currentTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Filled.ColorLens" Color="Color.Default" OnClick="ChangeThemeAsync"/>
        @if(rendered && AuthService.IsUserLoggedIn())
        {
            <MudButton OnClick="Logout" Color="Color.Primary" Variant="Variant.Filled">Logout</MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">UPS_Monitor</MudText>
        </MudDrawerHeader>
        @if(rendered && AuthService.IsUserLoggedIn())
        {
        <NavMenu />
        }
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>


@code {
    
    private string _themeName = "light";    // Default theme

    bool _drawerOpen = false;

    private bool rendered = false;  // Used to make sure nothing is rendered until AuthService is initialized

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override void OnInitialized()
    {
        AuthService.AuthenticationStateChanged += async () => await InvokeAsync(StateHasChanged);   // Allow for components to re-render with service alterations

        base.OnInitialized();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.Init();   // Verifies login status
            rendered = true;

            if (await LocalStorageService.ContainKeyAsync("theme"))     // Verifies if theme was already prevously saved
                _themeName = await LocalStorageService.GetItemAsStringAsync("theme");
            else
                _themeName = "light";   

            _currentTheme = _themeName == "light" ? _lightTheme : _darkTheme;

            StateHasChanged();  // Allow for components to re-render
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        await InvokeAsync(StateHasChanged);     // Allow for components to re-render
        await Task.Delay(100);
        Nav.NavigateTo("");     // Go to Home page when logging out
    }

    MudTheme _currentTheme = null;

    MudTheme _darkTheme = new MudTheme
    {
        Palette = new Palette                   // Palette defines the colors the theme uses for all the components and main layout
        {
        AppbarBackground = "#2E2E2E",     // Dark Grey
        AppbarText = "#FFFFFF",          // White
        Primary = "#B22222",             // Red
        TextPrimary = "#FFFFFF",         // White
        Background = "#1E1E1E",          // Slightly Darker Grey
        TextSecondary = "#B0B0B0",       // Light Grey
        DrawerBackground = "#333333",    // Dark Grey
        DrawerText = "#FFFFFF",          // White
        Surface = "#2E2E2E",             // Dark Grey
        ActionDefault = "#918F8F",       // Grey
        ActionDisabled = "#5E5E5E",      // Light Grey
        TextDisabled = "#8A8A8A"        // Light Grey
        }
    };



    MudTheme _lightTheme = new MudTheme
    {
        Palette = new Palette
        {
        AppbarBackground = "#FFFFFF",     // White
        AppbarText = "#333333",           // Dark Grey
        Primary = "#007CD1",              // Blue
        TextPrimary = "#333333",          // Dark Grey
        Background = "#F5F5F5",           // Light Grey
        TextSecondary = "#777777",        // Medium Grey
        DrawerBackground = "#F0F0F0",     // Light Grey
        DrawerText = "#333333",           // Dark Grey
        Surface = "#FFFFFF",              // White
        ActionDefault = "#918F8F",        // Grey
        ActionDisabled = "#B0B0B0",       // Light Grey
        TextDisabled = "#B0B0B0"         // Light Grey
        }
    };

    private async Task ChangeThemeAsync()
    {
        if (_themeName == "light")
        {
            _currentTheme = _darkTheme;
            _themeName = "dark"; 
        }
        else
        {
            _currentTheme = _lightTheme;
            _themeName = "light";
        }
        
        await LocalStorageService.SetItemAsStringAsync("theme", _themeName).ConfigureAwait(false);  // Save new theme
    }
}
